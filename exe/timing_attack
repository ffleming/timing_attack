#!/usr/bin/env ruby
require 'timing_attack'

class TimingAttackCli
  attr_reader :options
  def initialize
    @options = {}
  end

  def run
    parse_options
    sanitize_options
    execute_attack
  end

  private

  def json_file(filename)
    begin
      JSON.parse(File.read(filename))
    rescue JSON::ParserError => e
      raise TimingAttack::Errors::InvalidFileFormatError.new("Invalid JSON in #{filename}: #{e.message}")
    rescue Errno::ENOENT
      raise TimingAttack::Errors::FileNotFoundError.new("#{filename} not found")
    end
  end

  def flat_file(filename)
    begin
      File.readlines(filename).map(&:strip)
    rescue Errno::ENOENT
      raise TimingAttack::Errors::FileNotFoundError.new("#{filename} not found")
    end
  end

  def opt_parser
    @opt_parser ||= OptionParser.new do |opts|
      opts.program_name = File.basename(__FILE__)
      opts.banner = "#{opts.program_name} [options] -u <target> <inputs>"
      opts.on("-u URL", "--url URL", "URL of endpoint to profile.  'INPUT' will be replaced with the attack string") do |str|
        options[:url] = str
      end
      opts.on("-n NUM", "--number NUM", "Requests per input (default: 50)") do |num|
        options[:iterations] = num.to_i
      end
      opts.on("-c NUM", "--concurrency NUM", "Number of concurrent requests (default: 15)") do |num|
        options[:concurrency] = num.to_i
      end
      opts.on("-t NUM", "--threshold NUM", "Minimum threshold, in seconds, for meaningfulness (default: 0.025)") do |num|
        options[:threshold] = num.to_f
      end
      opts.on("-p", "--post", "Use POST, not GET") { |bool| options[:method] = bool ? :post : :get }
      opts.on("-q", "--quiet", "Quiet mode (don't display progress bars)") { |bool| options[:verbose] = !bool }
      opts.on("-b", "--brute-force", "Brute force mode") { |bool| options[:brute_force] = bool }
      opts.on("-i FILE", "--inputs-file FILE", "Read inputs from specified file, one per line") do |str|
        options[:inputs] = flat_file(filename)
      end
      opts.on("--parameters STR", "JSON hash of URL parameters.  'INPUT' will be replaced with the attack string") do |str|
        options[:params] = JSON.parse(str)
      end
      opts.on("--parameters-file FILE", "Name of file containing parameters as with --parameters") do |str|
        options[:params] = json_file(str)
      end
      opts.on("--headers STR", "JSON hash of headers.  'INPUT' will be replaced with the attack string") do |str|
        options[:headers] = JSON.parse(str)
      end
      opts.on("--headers-file FILE", "Name of file containing headers as with --headers") do |str|
        options[:headers] = json_file(str)
      end
      opts.on("--body STR", "JSON hash of parameters to be included in the request body.  'INPUT' will be replaced with the attack string") do |str|
        options[:body] = JSON.parse(str)
      end
      opts.on("--body-file FILE", "Name of file containing parameters as with --body") do |str|
        options[:body] = json_file(str)
      end
      opts.on("--http-username STR", "HTTP basic authentication username.  'INPUT' will be replaced with the attack string") do |str|
        options[:basic_auth_username] = str
      end
      opts.on("--http-password STR", "HTTP basic authentication password.  'INPUT' will be replaced with the attack string") do |str|
        options[:basic_auth_password] = str
      end
      opts.on("--percentile NUM", "Use NUMth percentile for calculations (default: 3)") { |num| options[:percentile] = num.to_i }
      opts.on("--mean", "Use mean for calculations") { |bool| options[:mean] = bool }
      opts.on("--median", "Use median for calculations") { |bool| options[:median] = bool }
      opts.on_tail("-v", "--version", "Print version information") do
        gem = Gem::Specification.find_by_name('timing_attack')
        puts "#{gem.name} #{gem.version}"
        exit
      end
      opts.on_tail("-h", "--help", "Display this screen") { puts opts ; exit }
    end
  end

  def parse_options
    begin
      opt_parser.parse!
    rescue TimingAttack::Errors::InvalidFileFormatError, TimingAttack::Errors::FileNotFoundError => e
      STDERR.puts e.message
      exit
    rescue OptionParser::InvalidOption => e
      STDERR.puts e.message
      puts opt_parser
      exit
    end
  end

  def sanitize_options
    options[:verbose] = true if options[:verbose].nil?
    options[:inputs] = ARGV if options[:inputs].nil?
    if options[:percentile]
      options.delete(:mean)
    elsif options[:median]
      options[:percentile] = 50
    elsif options[:mean]
      options.delete(:percentile)
    end
  end

  def execute_attack
    begin
      atk = if options.delete(:brute_force)
              TimingAttack::BruteForcer.new(options: options)
            else
              inputs = options.delete(:inputs)
              TimingAttack::Enumerator.new(inputs: inputs, options: options)
            end
      atk.run!
    rescue ArgumentError => e
      STDERR.puts e.message
      puts opt_parser
      exit
    rescue Interrupt
      puts "\nCaught interrupt, exiting"
      exit
    end
  end
end
TimingAttackCli.new.run
